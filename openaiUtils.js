import chalk from "chalk";
import { validateConfiguration } from "./configManager.js";
import { OpenAI } from "openai";
import { PromptType, SupportedLanguages } from "./models.js";

/**
 * Generates the language instruction for OpenAI prompts.
 */
function generateLanguageInstruction(langcode) {
  const languageMap = Object.values(SupportedLanguages).reduce((map, lang) => {
    map[lang.code] = lang.name;
    return map;
  }, {});
  const language = languageMap[langcode];
  return `Please respond in ${language}.`;
}

/**
 * Generates the prompt for analyzing code changes.
 */
function generatePrompt(files, promptType, config) {
  const languageInstruction = generateLanguageInstruction(
    config.OPENAI_RESPONSE_LANGUAGE
  );

  const promptMap = {
    [PromptType.ANALYZE]: (file) =>
      `Por favor, analise as altera√ß√µes neste commit. Forne√ßa uma vis√£o geral das modifica√ß√µes realizadas nos arquivos. Verifique se h√° algum erro ou bug aparente nas mudan√ßas e aponte poss√≠veis melhorias ou otimiza√ß√µes que podem ser implementadas. Al√©m disso, sugira boas pr√°ticas que poderiam ser aplicadas para aumentar a qualidade do c√≥digo.
        ${file.filename}:\n${file.content}\n\n${languageInstruction}`,
    [PromptType.CREATE]: (file) =>
      `Analise o conte√∫do do arquivo ${file.filename} abaixo e crie um t√≠tulo e uma mensagem de commit que sigam as melhores pr√°ticas para controle de vers√µes:

        ${file.content}

        Instru√ß√µes:

        Para o T√≠tulo do Commit:

        N√£o insira as palavras "T√≠tulo do Commit:" no texto.
        Use no m√°ximo 50 caracteres.
        Comece com um verbo no imperativo (ex.: "Adicionar", "Corrigir", "Remover").
        Seja espec√≠fico e direto sobre a altera√ß√£o realizada.
        Para a Mensagem do Commit:

        N√£o insira as palavras "Mensagem do Commit:" no texto.
        Separe o t√≠tulo e a mensagem com uma linha em branco.
        Descreva de forma detalhada as altera√ß√µes realizadas.
        Explique o motivo da altera√ß√£o e como ela impacta o projeto.
        Use listas ou par√°grafos curtos para organizar a explica√ß√£o.
        Restri√ß√µes:

        N√£o inclua T√≠tulo do Commit: ou Mensagem do Commit: no texto da resposta.
        Baseie-se estritamente nas informa√ß√µes fornecidas no conte√∫do do arquivo.
        N√£o invente informa√ß√µes que n√£o estejam no conte√∫do do arquivo.
        Evite copiar e colar trechos extensos do arquivo.
        N√£o insira informa√ß√µes pessoais ou sens√≠veis no commit.
        Formato da Resposta:

        [T√≠tulo do Commit]
        [Descri√ß√£o detalhada das altera√ß√µes, incluindo o porqu√™ da mudan√ßa e qualquer informa√ß√£o relevante.]

        ${languageInstruction}`,
  };

  if (!promptMap[promptType]) {
    throw new Error(`Invalid prompt type: ${promptType}`);
  }

  const prompt = files.map(promptMap[promptType]).join("\n\n");

  console.log(chalk.blue("üìù Generated prompt for OpenAI:"));
  return prompt;
}

/**
 * Analyzes updated code using OpenAI.
 */
export async function analyzeUpdatedCode(
  files,
  promptType = PromptType.ANALYZE
) {
  const config = validateConfiguration();

  const openai = new OpenAI({ apiKey: config.OPENAI_API_KEY });
  const prompt = generatePrompt(files, promptType, config);

  try {
    console.log(chalk.blue("üì§ Sending request to OpenAI..."));
    const response = await openai.chat.completions.create({
      model: config.OPENAI_API_MODEL,
      messages: [{ role: "user", content: prompt }],
      max_tokens: 2000,
    });
    console.log(chalk.green("‚úÖ Response received."));

    const completion = response.choices[0].message.content.trim();
    console.log(chalk.blue(completion));
    return completion;
  } catch (error) {
    console.error(chalk.red("‚ùå Error analyzing updated code:", error.message));
    throw error;
  }
}

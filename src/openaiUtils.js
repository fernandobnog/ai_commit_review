import chalk from "chalk";
import { validateConfiguration, updateValidApiKey } from "./configManager.js";
import { OpenAI } from "openai";
import { PromptType, SupportedLanguages } from "./models.js";

/**
 * Generates the language instruction for OpenAI prompts.
 */
function generateLanguageInstruction(langcode) {
  const languageMap = Object.values(SupportedLanguages).reduce((map, lang) => {
    map[lang.code] = lang.name;
    return map;
  }, {});
  const language = languageMap[langcode];
  return `Please respond entirely in ${language}.`;
}

/**
 * Generates the prompt for analyzing code changes.
 */
function generatePrompt(files, promptType, config) {
  const diffs = files
    .map(
      (file) => `
          **${file.filename}:**
          \`\`\`
          ${file.diff}
          \`\`\``
    )
    .join("\n");

  const languageInstruction = generateLanguageInstruction(
    config.OPENAI_RESPONSE_LANGUAGE
  );

  if (promptType === PromptType.ANALYZE) {
    return `Assuma o papel de um revisor de c√≥digo s√™nior.

            Analise detalhadamente as seguintes altera√ß√µes de c√≥digo (commits) fornecidas:
            
            ${diffs}
            
            Para cada arquivo modificado, organize sua an√°lise da seguinte forma:

            **Arquivo: [Nome do Arquivo]**

            1.  **Resumo Detalhado das Modifica√ß√µes:**
                * Qual foi o objetivo principal e o impacto esperado das altera√ß√µes neste arquivo?
                * Descreva as principais funcionalidades ou l√≥gicas que foram adicionadas, removidas ou significativamente alteradas.

            2.  **Identifica√ß√£o de Erros, Bugs Potenciais e Vulnerabilidades:**
                * Existem erros de l√≥gica, falhas no tratamento de exce√ß√µes, condi√ß√µes de corrida (race conditions), vazamentos de mem√≥ria, ou outros bugs?
                * Foram introduzidas ou negligenciadas vulnerabilidades de seguran√ßa (ex: SQL Injection, XSS, manipula√ß√£o insegura de entradas)?
                * Para cada item identificado:
                    * Cite o trecho de c√≥digo relevante (ou a linha aproximada).
                    * Explique detalhadamente a natureza do problema.
                    * Descreva o impacto potencial (ex: comportamento incorreto, falha no sistema, brecha de seguran√ßa).

            3.  **Sugest√µes de Melhoria e Otimiza√ß√£o (com justificativas):**
                * O c√≥digo pode ser refatorado para aumentar a clareza, legibilidade ou manutenibilidade? (Ex: simplificar l√≥gica complexa, extrair m√©todos/fun√ß√µes, aplicar princ√≠pios de design como DRY - Don't Repeat Yourself).
                * Existem oportunidades para otimizar o desempenho? (Ex: algoritmos mais eficientes, redu√ß√£o de opera√ß√µes custosas, otimiza√ß√£o de queries de banco de dados).
                * A testabilidade do c√≥digo pode ser aprimorada? Como?
                * Para cada sugest√£o, forne√ßa uma justificativa clara e, se poss√≠vel, um pequeno exemplo de como poderia ser implementada.

            4.  **Recomenda√ß√µes de Boas Pr√°ticas e Qualidade de C√≥digo:**
                * Avalie a ader√™ncia a princ√≠pios de c√≥digo limpo (Clean Code): nomes significativos para vari√°veis e fun√ß√µes, fun√ß√µes curtas e com responsabilidade √∫nica, baixo acoplamento e alta coes√£o.
                * O c√≥digo segue as conven√ß√µes de estilo da linguagem ou do projeto (se conhecidas)?
                * Os coment√°rios s√£o adequados? Eles explicam o "porqu√™" e as inten√ß√µes, e n√£o apenas "o qu√™" o c√≥digo faz?
                * A modularidade e a reutiliza√ß√£o de c√≥digo foram bem aplicadas ou h√° oportunidades para tal?

            **Considera√ß√µes Gerais sobre o Commit (se aplic√°vel):**
            * H√° alguma observa√ß√£o sobre a mensagem do commit (clareza, completude)?
            * As altera√ß√µes parecem coesas e alinhadas com um √∫nico objetivo, ou misturam diferentes preocupa√ß√µes?
            * Existem implica√ß√µes mais amplas na arquitetura do sistema ou em outros m√≥dulos?

            Sua an√°lise deve ser:
            * **Completa e Espec√≠fica:** Forne√ßa detalhes suficientes e baseie suas observa√ß√µes diretamente nos trechos de c√≥digo do diff. Evite afirma√ß√µes gen√©ricas.
            * **Precisa e Justificada:** Certifique-se de que suas observa√ß√µes sobre erros ou melhorias s√£o tecnicamente corretas e bem fundamentadas.
            * **Construtiva:** O objetivo √© auxiliar na melhoria da qualidade do c√≥digo.
            * **Objetiva:** Mantenha um tom neutro e profissional, focado nos aspectos t√©cnicos.

            ${languageInstruction}`;
  }

  if (promptType === PromptType.CREATE) {
    return `Sua tarefa √© gerar um t√≠tulo de commit e uma mensagem de commit (corpo) que sejam precisos, informativos e sigam as melhores pr√°ticas de controle de vers√£o. A resposta deve respeitar o idioma predominante no conte√∫do dos arquivos fornecidos nos diffs.

            **Contexto:**
            Voc√™ est√° analisando as seguintes altera√ß√µes de c√≥digo (diffs). Seu objetivo √© resumir essas altera√ß√µes de forma clara para que outros desenvolvedores (e seu eu futuro) possam entender facilmente o prop√≥sito e o impacto de cada commit.
            
            **Diffs:**
            ${diffs}

            **Processo de An√°lise Interna (Passos que voc√™ deve seguir antes de formular a resposta):**
            1.  **Compreens√£o Geral:** Analise o conjunto de diffs para identificar o tema central ou o objetivo principal das modifica√ß√µes. Pergunte-se: "Qual problema principal estas mudan√ßas resolvem?" ou "Qual funcionalidade chave est√° sendo implementada, corrigida ou alterada?".
            2.  **Identifica√ß√£o do "O Qu√™":** Para cada altera√ß√£o significativa nos diffs, determine exatamente *o que* foi modificado (ex: quais fun√ß√µes, classes, vari√°veis, l√≥gica de controle de fluxo, arquivos de configura√ß√£o, etc.).
            3.  **Infer√™ncia Cautelosa do "O Porqu√™" (Motiva√ß√£o):**
                * Tente deduzir *por que* cada mudan√ßa significativa foi feita. Baseie essa dedu√ß√£o estritamente nas evid√™ncias presentes nos diffs (ex: c√≥digo que simplifica uma l√≥gica complexa, corrige um comportamento inconsistente, adiciona tratamento para um novo caso de uso vis√≠vel no c√≥digo, remove c√≥digo obsoleto/comentado).
                * **Importante:** Se o "porqu√™" n√£o for claramente evidente a partir das altera√ß√µes de c√≥digo, N√ÉO INVENTE uma motiva√ß√£o. Neste caso, foque em descrever o "qu√™" e o impacto observ√°vel da mudan√ßa. √â prefer√≠vel uma descri√ß√£o factual do que foi feito a uma especula√ß√£o incorreta sobre o motivo.
            4.  **Avalia√ß√£o do Impacto:** Considere como as mudan√ßas afetam o comportamento, a performance, a seguran√ßa ou a manutenibilidade do projeto.

            **Instru√ß√µes para a Sa√≠da (T√≠tulo e Mensagem do Commit):**

            -   **T√≠tulo do Commit:**
                -   ${languageInstruction} 
                -   Inicie com um emoji relevante que represente a natureza da mudan√ßa (sugest√µes: üöÄ para novas funcionalidades, ‚ú® para melhorias, üêõ para corre√ß√£o de bugs, üîß para refatora√ß√£o/ferramentas, üìù para documenta√ß√£o, ‚ôªÔ∏è para refatora√ß√£o, üîí para seguran√ßa, üìà para performance).
                -   Use um verbo no imperativo no in√≠cio da frase (ex: "Adiciona", "Corrige", "Refatora", "Remove", "Atualiza", "Melhora").
                -   Seja espec√≠fico, conciso e direto sobre a altera√ß√£o principal.
                -   M√°ximo de 50 caracteres.

            -   **Mensagem do Commit (Corpo):**
                -   ${languageInstruction}
                -   **Descri√ß√£o Detalhada das Mudan√ßas (O Qu√™ Foi Feito):**
                    * Descreva as principais altera√ß√µes realizadas de forma clara.
                    * Use listas (bullet points) ou par√°grafos curtos para organizar a explica√ß√£o.
                    * Mencione as partes mais importantes do c√≥digo que foram afetadas (ex: "Modificada a fun√ß√£o X para lidar com Y", "Removida a classe Z por ser obsoleta"), mas evite colar grandes trechos dos diffs.
                -   **Motiva√ß√£o e Contexto (O Porqu√™ da Mudan√ßa):**
                    * Explique a raz√£o por tr√°s das altera√ß√µes. Qual problema foi resolvido? Qual objetivo foi alcan√ßado?
                    * Se baseou sua infer√™ncia do "porqu√™" em heur√≠sticas (e n√£o em coment√°rios expl√≠citos no diff), seja objetivo ao descrever o cen√°rio que a mudan√ßa parece endere√ßar.
                    * Se a raz√£o exata n√£o for clara, descreva o benef√≠cio ou o resultado esperado da mudan√ßa (ex: "Esta altera√ß√£o melhora a legibilidade do m√≥dulo X", "Com isso, o processamento de Y torna-se mais eficiente").
                -   **Impacto no Projeto (Como Afeta):**
                    * Se aplic√°vel e infer√≠vel, explique brevemente como as mudan√ßas impactam o projeto (ex: "Isso corrige o bug reportado em #123", "Permite que os usu√°rios agora fa√ßam Z", "Reduz o tempo de carregamento da p√°gina X").

            -   **Restri√ß√µes Importantes:**
                -   **Fidelidade aos Diffs:** Baseie TODA a sua resposta estritamente na informa√ß√£o contida nos diffs.
                -   **N√£o Invente:** N√£o adicione informa√ß√µes, funcionalidades, raz√µes ou contextos que n√£o possam ser razoavelmente e diretamente inferidos a partir das altera√ß√µes de c√≥digo fornecidas.
                -   **Concis√£o:** Evite copiar e colar por√ß√µes extensas dos diffs. O objetivo √© resumir e explicar.
                -   **Privacidade:** N√£o inclua nenhuma informa√ß√£o pessoal ou sens√≠vel.

            **Formato da Resposta (Exatamente como no exemplo):**
            T√≠tulo
            Mensagem (corpo)`;
  }

  throw new Error(`Invalid prompt type: ${promptType}`);
}

/**
 * Analyzes updated code using OpenAI.
 */
export async function analyzeUpdatedCode(
  files,
  promptType = PromptType.ANALYZE
) {
  const config = await validateConfiguration();
  let openai = null;
  //TODO logica para acesso local ou remoto
  if(config.OPENAI_API_BASEURL){
    openai = new OpenAI({baseURL:config.OPENAI_API_BASEURL, apiKey: config.OPENAI_API_KEY });
  }else{
    openai = new OpenAI({ apiKey: config.OPENAI_API_KEY });
  }
  const prompt = generatePrompt(files, promptType, config);
  try {
    console.log(chalk.blue("üì§ Sending request to AI..."));
    const response = await openai.chat.completions.create({
      model: config.OPENAI_API_MODEL,
      messages: [{ role: "user", content: prompt }],
      max_tokens: 2000,
    });
    console.log(chalk.green("‚úÖ Response received."));

    return response.choices[0].message.content.trim();
  } catch (error) {
    console.error(chalk.red("‚ùå Error analyzing updated code:", error.message));
    if(error.message.includes("401")) {
      await updateValidApiKey()
      return analyzeUpdatedCode(files, promptType);
    } else{
      throw error;
    }
  }
}
